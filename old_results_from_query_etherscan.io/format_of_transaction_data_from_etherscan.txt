Goal, for every entry in the list of ethermine wallets.

What you should really get is every wallet that has ever got paid from ethermine. 
That way you can model the lifecycle of a miner. YOu can see when they started and when they quit.
Provided they used ethermine.

This from etherscan API

(String: wallet address, 
Date: date of first income from ethermine,
float[] monthly ether ether sent it for every month since 1-2015. this is (12*6)  or (72) long. 


You can plot that array as a line chart to get their monthly income. 

You can remove all the wallets that have no income statements from ethermine.


From EthermineAPI

	This is the part of the program with the high time cost. You will probably have to make 2 calls per wallet.

(wallet_address,
date, time info was queried on. datetime.datetime.now()
number of workers,
current average hashrate, # you might want to do this 10 times (once per day for 10 days) and this is variable.
			  # since the real average is what matters and you might have caught them on a bad day.
			  # you need to get around their API limits somehow since right now there the limit is too high. 


You might want to store a set of tuples (worker1, current hashrate). that way you can cluster their own-price elasticity. 



Once you have all of those you can stitch them together like

(wallet Address, 
Date gathered,
Date of first income, 
Array of monthly revenue,
current number of workers,
array of (workerName, current avg hashrate).
 You can use word_frequency on workerName to get an intuition for the type of machine.
 If it is helpful

You can do some fancy math here to get their own price elasticity for every year.
Null if they just started or only one month worth of data.
		That is a float. round(5) you really only care about that level of accuracy.

(life time own price elasticity,
first year, second year, third year. 
)

https://dev.to/thughes24/how-to-turn-your-vpn-into-a-proxy-using-python-28ag
this is how you proxy your ip in python









